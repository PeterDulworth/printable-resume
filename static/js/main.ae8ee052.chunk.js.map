{"version":3,"sources":["components/SectionHeader.js","components/Section.js","components/ItemHeader.js","components/Bullets.js","components/Item.js","components/Skills.js","components/WhoAmI.js","components/PrintableResume.js","App.js","serviceWorker.js","index.js"],"names":["SectionHeader","_ref","title","react_default","a","createElement","className","Section","children","components_SectionHeader","ItemHeader","subTitle","date","Bullets","items","map","x","i","key","replaceWithLinks","wordList","linksWords","linksMap","word","indexOf","href","t","index","Fragment","Item","positionTitle","_ref$bullets","bullets","body","links","linkLabels","Object","keys","newBullets","bullet","split","newBody","components_ItemHeader","components_Bullets","SkillColumn","_ref2","category","Skills","categories","components_Section","skillCategory","skillCategoryIdx","Skills_SkillColumn","assign","WhoAmI","_ref$personalInfo","personalInfo","address","email","github","website","phone","label","PrintableResume","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","model","fetch","resp","json","setState","Prism","highlightAll","skillsIndex","skills","sections","section","sectionIdx","item","itemIdx","components_Item","components_Skills","splice","name","components_WhoAmI","React","Component","App","componentRef","useRef","lib_default","trigger","content","current","components_PrintableResume","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae8ee052.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// must be a class component for printing to work :/\nconst SectionHeader = ({ title }) => {\n    return <div className=\"SectionHeader\">\n        {title}\n    </div>;\n};\n\nSectionHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\nexport default SectionHeader;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SectionHeader from './SectionHeader';\n\nconst Section = ({ title, children }) => {\n    return (\n        <div className=\"Section\">\n            <SectionHeader title={title} />\n            {children}\n        </div>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired,\n};\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// must be a class component for printing to work :/\nconst ItemHeader = ({ title, subTitle, date }) => {\n    return <div className=\"ItemHeader\">\n        <div className=\"ItemHeader--title\">\n            <span className=\"ItemHeader--title-main\">{title}</span>\n            <span className=\"ItemHeader--title-sub\">{subTitle}</span>\n        </div>\n        <div className=\"ItemHeader--date\">{date}</div>\n    </div>;\n};\n\nItemHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n    subTitle: PropTypes.string,\n    date: PropTypes.string.isRequired,\n};\n\nexport default ItemHeader;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Bullets = ({ items }) => {\n    return <ul className=\"Bullets\">\n        {items.map((x, i) => \n            <li key={i}>{x}</li>\n        )}\n    </ul>\n};\n\nBullets.propTypes = {\n    items: PropTypes.array.isRequired,\n};\n\nexport default Bullets;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ItemHeader from './ItemHeader';\nimport Bullets from './Bullets';\n\n// replace any links in the line with anchor tags\nconst replaceWithLinks = (wordList, linksWords, linksMap) => {\n    return wordList.map(word => {\n        if (linksWords.indexOf(word) !== -1) {\n            return <a href={linksMap[word]}>{word}</a>;\n        }\n        return word;\n    }).map((t, index) => \n        <React.Fragment key={index}>\n            <span>{t} </span>\n        </React.Fragment>\n    );\n};\n\nconst Item = ({ title, subTitle, date, positionTitle, bullets = [], body, links }) => {\n    const linkLabels = Object.keys(links || {});\n\n    const newBullets = bullets.map(bullet => {\n        return replaceWithLinks(bullet.split(' '), linkLabels, links);\n    });\n\n    const newBody = body.map(bullet => {\n        return replaceWithLinks(bullet.split(' '), linkLabels, links);\n    });\n        \n    return (<div className=\"Item\">\n        <ItemHeader title={title} subTitle={subTitle} date={date} />\n        <i>{positionTitle}</i>\n        <Bullets items={newBullets} />\n        {newBody}\n    </div>); \n};\n\nItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    subTitle: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    positionTitle: PropTypes.string.isRequired,\n    body: PropTypes.array.isRequired,\n};\n\nexport default Item;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Bullets from './Bullets';\nimport Section from './Section';\n\nconst Skills = ({ categories }) => {\n    return (\n        <Section title=\"skills\">\n            <div className=\"Skills\">\n                <div className=\"Skills--columns\">\n                    {\n                        categories.map((skillCategory, skillCategoryIdx) => <SkillColumn {...skillCategory} key={skillCategoryIdx} />)\n                    }       \n                </div>\n            </div>\n        </Section>\n    );\n};\n\nexport const SkillColumn = ({ category, items}) => {\n    return (\n        <div className=\"Skills--column\">\n            <div className=\"Skills--column-title\">{category}</div>\n            <Bullets items={items} />\n        </div>\n    );\n};\n\nSkills.propTypes = {\n    categories: PropTypes.array.isRequired\n};\n\nexport default Skills;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WhoAmI = ({ personalInfo = null }) => {\n    if (personalInfo === null) {\n        return null;\n    }\n    const { address, email, github, website, phone } = personalInfo;\n    \n    return (\n        <div className=\"WhoAmI\">\n            <div>\n                {address} ♦ {phone} ♦ {email} ♦ GitHub: <a href={github.href}>{github.label}</a> ♦ <a href={website.href}>{website.label}</a>\n            </div>\n        </div>\n    );\n};\n\nWhoAmI.propTypes = {\n    personalInfo: PropTypes.object.isRequired,\n}\n\nexport default WhoAmI;","import React from 'react';\nimport Section from './Section';\nimport Item from './Item';\nimport Skills from './Skills';\nimport WhoAmI from './WhoAmI';\nimport Prism from \"prismjs\";\nimport '../vendor/prism.css';\n\n// must be a class component for printing to work :/\nclass PrintableResume extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            model: null,\n        };\n    }\n\n    async componentDidMount() {\n        const resp = await fetch('http://peterdulworth.com/api/resumeData/peterdulworth.json');\n        const body = await resp.json();\n        this.setState({ model: body });\n        Prism.highlightAll()\n    }\n\n    render() {\n        if (this.state.model === null) {\n            return 'loading..';\n        }\n\n        const skillsIndex = this.state.model.skills.index;\n\n        const sections = this.state.model.sections.map((section, sectionIdx) => \n            <Section title={section.title} key={sectionIdx}>\n                {section.items.map((item, itemIdx) => \n                    <Item {...item} key={itemIdx} />\n                )}\n            </Section>\n        );\n\n        const skills = <Skills key={12342} categories={this.state.model.skills.categories} />\n\n        sections.splice(skillsIndex, 0, skills);\n\n        return <div className=\"PrintableResume\">\n            <header className=\"PrintableResume--title\"><span>{this.state.model.name}</span></header>\n            <WhoAmI personalInfo={this.state.model.personalInfo} />\n            {sections}\n            {/* <pre>\n                <code className=\"language-javascript\" contenteditable=\"true\">\n                    {JSON.stringify(this.state.model, null, 2)}       \n                </code>\n            </pre> */}\n        </div>;\n    }\n}\n\nexport default PrintableResume;\n","import React, { useRef } from 'react';\nimport './App.scss';\nimport PrintableResume from './components/PrintableResume';\nimport ReactToPrint from 'react-to-print';\n\nconst App = () => {\n  const componentRef = useRef(null);\n\n  return (\n    <div className=\"App\">\n      <div className=\"print-wrapper\">\n        <ReactToPrint\n          trigger={() => <a href=\"#\">print resume</a>} // eslint-disable-line\n          content={() => componentRef.current}\n        />\n      </div>\n      <div className=\"content-wrapper\">\n        <PrintableResume ref={componentRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}